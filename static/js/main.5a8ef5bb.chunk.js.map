{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","className","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","role","htmlFor","TextForm","text","setText","useState","Fragment","style","color","heading","value","onChange","event","target","backgroundColor","rows","handleUpClick","newText","toUpperCase","showAlert","handleLoClick","toLowerCase","async","window","navigator","clipboard","writeText","alert","err","console","error","handleDownload","blob","Blob","link","document","URL","createObjectURL","download","body","appendChild","click","removeChild","split","length","Alert","word","lower","charAt","slice","capitalize","msg","defaultProps","aboutText","App","setMode","setAlert","message","setTimeout","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.5a8ef5bb.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n// import { Link } from 'react-router-dom';\n\nexport default function Navbar(props) {\n  return (\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\n        <div className=\"container-fluid\">\n          <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n            <span className=\"navbar-toggler-icon\"></span>\n          </button>\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n              <li className=\"nav-item\">\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\n              </li>\n              {/* <li className=\"nav-item\">\n                <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\n              </li> */}\n            </ul>\n            {/* <form className=\"d-flex\" role=\"search\">\n              <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\n              <button className=\"btn btn-primary\" type=\"submit\">Search</button>\n            </form> */}\n            <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\n              <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\n            </div>\n          </div>\n        </div>\n    </nav>\n  )\n}\n\nNavbar.propTypes = {\n    title: PropTypes.string.isRequired,\n    aboutText: PropTypes.string.isRequired\n}\n\nNavbar.defaultProps = {\n    aboutText: \"About\"\n};","import React, { useState } from 'react'\n\nexport default function TextForm(props) {\n  const handleUpClick = ()=>{\n    //console.log(\"Uppercase was Clicked\")\n    let newText = text.toUpperCase();\n    setText(newText)\n    props.showAlert(\"Converted to Uppercase!\", \"success\");\n  }\n\n  const handleLoClick = ()=>{\n    //console.log(\"Uppercase was Clicked\")\n    let newText = text.toLowerCase();\n    setText(newText)\n    props.showAlert(\"Converted to Lowercase!\", \"success\");\n  }\n\n  const handleCopyClick = async () => {\n      try {\n          await window.navigator.clipboard.writeText(text);\n          alert(\"Copied to clipboard!\");\n      } catch (err) {\n          console.error(\n              \"Unable to copy to clipboard.\",\n              err\n          );\n          alert(\"Copy to clipboard failed.\");\n      }\n  };\n\n  const handleDownload = () => {\n    const blob = new Blob([text], { type: \"text/plain\" });\n    const link = document.createElement(\"a\");\n    link.href = URL.createObjectURL(blob);\n    link.download = \"convertcase-net.txt\";\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  const handleOnChange = (event)=>{\n    //console.log(\"On Change\")\n    setText(event.target.value)\n  }\n\n  const [text, setText] = useState('');\n  return (\n    <>\n      <div className=\"container\" style={{color: props.mode==='dark'?'white':'black'}}>\n          <h1>{props.heading}</h1>\n          <div className=\"mb-3\">\n              <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode==='dark'?'grey':'white', color: props.mode==='dark'?'white':'black'}} id=\"myBox\" rows=\"8\"></textarea>\n          </div>\n          <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>Convert to Uppercase</button>\n          <button className=\"btn btn-primary mx-2\" onClick={handleLoClick}>Convert to Lowercase</button>\n          <button className=\"btn btn-primary mx-2\" onClick={handleCopyClick}>Copy to Clipboard</button>\n          <button className=\"btn btn-primary mx-2\" onClick={handleDownload}>Download Text</button>\n      </div>\n      <div className=\"container my-3\" style={{color: props.mode==='dark'?'white':'black'}}>\n        <h2>Your text summary</h2>\n        <p>{text.split(\" \").length} words and {text.length} characters</p>\n        <p>{0.008 * text.split(\" \").length} Minutes read</p>\n        <h2>Preview</h2>\n        <p>{text.length>0?text:'Enter something in the textbox above to preview it...'}</p>\n      </div>\n    </>\n  )\n}\n","import React from 'react'\n\nexport default function Alert(props) {\n    const capitalize = (word)=>{\n        const lower = word.toLowerCase();\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\n    }\n  return (\n    props.alert &&<div className={`alert alert-${props.alert.type.toLowerCase()} alert-dismissible fade show`} role=\"alert\">\n        <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\n        {/* <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button> */}\n    </div>\n  )\n}\n","import React, {useState} from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert';\n// import ColorSwatches from './components/ColorSwatches';\n// import About from './components/About';\n// import {\n//   BrowserRouter as Router,\n//   Routes,\n//   Route\n// } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState('light')\n  const [alert, setAlert] = useState(null)\n\n  const showAlert = (message, type)=>{\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null)\n    }, 2000);\n  }\n\n  const toggleMode = ()=>{\n    if(mode === 'light'){\n      setMode('dark')\n      document.body.style.backgroundColor = 'grey'\n      showAlert(\"Dark mode has been enabled\", \"Success\")\n    }\n    else{\n      setMode('light')\n      document.body.style.backgroundColor = 'white'\n      showAlert(\"Light mode has been enabled\", \"Success\")\n    }\n  }\n  return (\n    <>\n    {/* <Router> */}\n      {/* <Navbar title=\"TextUtils\" aboutText=\"About\" /> */}\n      <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n      <Alert alert={alert}/>\n      <div className=\"container my-3\">\n        {/* <Routes> */}\n          {/* <Route exact path=\"/about\" element={<About />} /> */}\n          {/* <Route exact path=\"/\" element={<TextForm showAlert={showAlert} heading=\"Enter the text to analyze below\" mode={mode} />} /> */}\n          <TextForm showAlert={showAlert} heading=\"Enter the text to analyze below\" mode={mode} />\n        {/* </Routes> */}\n      </div>\n      {/* <ColorSwatches/> */}\n    {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}